use std::collections::HashMap;

pub const TX_PRC: [(usize, usize); 73] = [
    (0, 83950),
    (5, 83950),
    (7, 83950),
    (10, 83950),
    (15, 83950),
    (20, 83950),
    (25, 83950),
    (30, 83950),
    (37, 127200),
    (50, 127200),
    (60, 191900),
    (63, 191900),
    (75, 191900),
    (100, 191900),
    (112, 238500),
    (150, 238500),
    (160, 238500),
    (167, 238500),
    (200, 272600),
    (225, 272600),
    (250, 272600),
    (300, 309128),
    (315, 309128),
    (350, 353290),
    (360, 353290),
    (400, 353290),
    (450, 397451),
    (500, 397451),
    (600, 465017),
    (625, 465017),
    (630, 465017),
    (650, 465017),
    (700, 515096),
    (750, 515096),
    (800, 457863),
    (1000, 486480),
    (1100, 583776),
    (1120, 583776),
    (1200, 583776),
    (1250, 583776),
    (1260, 583776),
    (1375, 583776),
    (1400, 583776),
    (1500, 583776),
    (1600, 622694),
    (1750, 622694),
    (1800, 622694),
    (2000, 622694),
    (2200, 747233),
    (2250, 747233),
    (2500, 747233),
    (2650, 747233),
    (3000, 747233),
    (3120, 871772),
    (3150, 871772),
    (3200, 871772),
    (3500, 871772),
    (4000, 871772),
    (4500, 871772),
    (4800, 871772),
    (5000, 871772),
    (6000, 1220480),
    (7000, 1220480),
    (7500, 1220480),
    (8000, 1220480),
    (9000, 1220480),
    (10000, 1220480),
    (12000, 1537805),
    (12500, 1537805),
    (15000, 1537805),
    (16000, 1537805),
    (17000, 1537805),
    (18000, 1537805),
];

use std::sync::OnceLock;
pub static TRS_PRICE: OnceLock<HashMap<usize, usize>> = OnceLock::new();
pub fn trs_price(pw: usize) -> f32 {
    let trpr = TRS_PRICE.get_or_init(trs_price_init);
    let pr = trpr.get(&pw).unwrap();
    let pr = *pr as f32;
    pr
}
fn trs_price_init() -> HashMap<usize, usize> {
    let mut trs_prc = HashMap::<usize, usize>::new();
    for (w, p) in TX_PRC {
        trs_prc.insert(w, p);
    }
    trs_prc
}
